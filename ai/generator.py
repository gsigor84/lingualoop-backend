import osfrom openai import OpenAIfrom dotenv import load_dotenvfrom ai.toolkit_builder import build_toolkitfrom ai.unsplash_client import fetch_image_urlload_dotenv()client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))def generate_lesson(topic, level, language="English"):    prompt = f"""You are a helpful language teacher. Create a short lesson for a {level} learner who is studying {language}.Topic: {topic}Include:- A list of 5-7 useful vocabulary words with simple definitions in English.- A short, simple dialogue in {language} related to the topic, with speaker labels like A: and B:- Keep it beginner-friendly and practical.Output format:Vocabulary:* Word1: definition* Word2: definitionDialogue:A: ...B: ..."""    try:        response = client.chat.completions.create(            model="gpt-3.5-turbo",            messages=[{"role": "user", "content": prompt}],            temperature=0.7        )        content = response.choices[0].message.content        print("\nüì¶ RAW AI OUTPUT:\n", content, "\n")        # Initialize        vocab_section = []        dialogue = "Sorry, no dialogue generated."        # Parse vocabulary        if "Vocabulary:" in content and "Dialogue:" in content:            vocab_raw = content.split("Vocabulary:")[1].split("Dialogue:")[0].strip().split("\n")            for line in vocab_raw:                if ':' in line:                    clean_line = line.replace('*', '').strip()                    english, definition = clean_line.split(':', 1)                    english = english.strip()                    definition = definition.strip()                    # Fetch image using the English word only                    image_url = fetch_image_url(english)                    vocab_section.append({                        "english": english,                        "translation": definition,                        "image": image_url                    })        # Parse dialogue        if "Dialogue:" in content:            dialogue = content.split("Dialogue:")[1].strip()        # Build learning toolkit        toolkit = build_toolkit(topic=topic, vocab=vocab_section)        return {            "vocab": vocab_section,            "dialogue": dialogue,            "toolkit": toolkit        }    except Exception as e:        print("‚ùå Error during lesson generation:", e)        return {            "vocab": [],            "dialogue": "Sorry, no dialogue generated.",            "toolkit": {}        }
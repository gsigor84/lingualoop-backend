import osfrom openai import OpenAIfrom dotenv import load_dotenvfrom ai.toolkit_builder import build_toolkit  # ✅ import toolkit builderload_dotenv()client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))def generate_lesson(topic, level, language="English"):    prompt = f"""You are a helpful language teacher. Create a short lesson for a {level} learner who is studying {language}.Topic: {topic}Include:- A list of 5-7 useful vocabulary words with simple definitions in English.- A short, simple dialogue in {language} related to the topic, with speaker labels like A: and B:- Keep it beginner-friendly and practical.Output format:Vocabulary:* Word1: definition* Word2: definitionDialogue:A: ...B: ..."""    try:        response = client.chat.completions.create(            model="gpt-3.5-turbo",            messages=[{"role": "user", "content": prompt}],            temperature=0.7        )        content = response.choices[0].message.content        vocab_section = []        dialogue = "Sorry, no dialogue generated."        if "Vocabulary" in content:            vocab_lines = content.split("Vocabulary:")[1].split("Dialogue:")[0].strip().split("\n")            vocab_section = [line.strip() for line in vocab_lines if line.strip()]        if "Dialogue:" in content:            dialogue_section = content.split("Dialogue:")[1].strip()            dialogue = dialogue_section        # ✅ Build 3-Principle Toolkit using new AI model        toolkit = build_toolkit(topic=topic, vocab=vocab_section)        return {            "vocab": vocab_section,            "dialogue": dialogue,            "toolkit": toolkit  # ✅ Add toolkit to response        }    except Exception as e:        print("❌ Error during lesson generation:", e)        return {            "vocab": ["error", "no", "vocab", "parsed"],            "dialogue": "Sorry, no dialogue generated.",            "toolkit": {}        }
import osimport jsonfrom openai import OpenAIfrom dotenv import load_dotenvload_dotenv()client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))def build_toolkit(topic, vocab):    vocab_items = "\n".join(vocab)    prompt = f"""You are LearnMaster, a high-level AI learning strategist trained in memory science.A user is learning the topic: "{topic}"With these vocabulary terms:{vocab_items}Your task is to generate a **deep and personalized 3-Principle Learning Toolkit**, applying each principle to this vocabulary set and topic.Follow this structure and include **tailored tips**:1. Effort/Time Exchange:- Extract 5‚Äì7 core vocab terms- For each, write a short, motivating drill strategy (no emojis-only)- Example: "Repeat 'Comida = food' 10x, then quiz yourself blindfolded."2. Omni-Learner Principle:- Recommend **multisensory strategies**- Give tips that mix sketching, saying, acting, or visual imagination- Make it topic-specific. Ex: "Draw your favorite Spanish meal using these words."3. Iteration Effect:- Generate **quiz-style questions** (not basic meaning recall)- Include varied formats: fill-in-the-blank, matching, use-in-sentence- Encourage spaced reviewRespond ONLY with a valid JSON object with this structure:{{  "title": "üéØ Learn Faster Than Anyone: The 3-Principle Toolkit",  "principles": [    {{      "title": "1. Effort/Time Exchange",      "summary": "Explain why effort now saves time later.",      "tips": ["Tip 1", "Tip 2", "..."]    }},    {{      "title": "2. Omni-Learner Principle",      "summary": "Explain why multisensory learning helps.",      "tips": ["Tip 1", "Tip 2", "..."]    }},    {{      "title": "3. Iteration Effect",      "summary": "Explain the value of testing and spacing.",      "tips": ["Quiz 1", "Quiz 2", "..."]    }}  ]}}Only return the JSON."""    try:        response = client.chat.completions.create(            model="gpt-3.5-turbo",            messages=[{"role": "user", "content": prompt}],            temperature=0.7        )        content = response.choices[0].message.content        toolkit_data = json.loads(content)        return toolkit_data    except Exception as e:        print("‚ùå Error generating advanced toolkit:", e)        return {            "title": "Toolkit Error",            "principles": [],            "error": str(e)        }
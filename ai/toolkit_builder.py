from openai import OpenAIimport osfrom dotenv import load_dotenvload_dotenv()client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))def build_toolkit(topic, vocab):    vocab_list = [f"{v['translation']} ({v['english']})" for v in vocab if isinstance(v, dict)]    prompt = f"""You're an expert at learning science and memory techniques.Given the topic "{topic}" and the following vocabulary:{', '.join(vocab_list)}Generate 3 short learning strategies for each of the following principles:1. Effort/Time Exchange (how doing effort now saves time later)2. Omni-Learner Principle (multi-sensory learning: hearing, seeing, writing, speaking)3. Iteration Effect (spaced repetition, self-testing, teaching)Output only a JSON object like:{{  "effort_time_exchange": ["...", "..."],  "omni_learner_principle": ["...", "..."],  "iteration_effect": ["...", "..."]}}"""    try:        response = client.chat.completions.create(            model="gpt-3.5-turbo",            messages=[{ "role": "user", "content": prompt }],            temperature=0.5        )        content = response.choices[0].message.content        # Try to parse the AI's response into a dictionary        import json, re        json_str = re.search(r"\{.*\}", content, re.DOTALL)        if json_str:            return json.loads(json_str.group())        else:            return {                "effort_time_exchange": [],                "omni_learner_principle": [],                "iteration_effect": []            }    except Exception as e:        print("‚ùå Error in build_toolkit:", e)        return {            "effort_time_exchange": [],            "omni_learner_principle": [],            "iteration_effect": []        }
from flask import Flask, request, jsonifyfrom flask_cors import CORSfrom ai.generator import generate_lessonfrom ai.quiz_generator import generate_quizfrom ai.rhyme_generator import generate_rhymesfrom ai.unsplash_client import fetch_image_url from ai.rhyme_quiz_api import rhyme_quiz_bpapp = Flask(__name__)CORS(app)app.register_blueprint(rhyme_quiz_bp)# Health check@app.route("/")def home():    return jsonify({"message": "LinguaLoop backend running âœ…"})# Lesson generator route@app.route("/api/generate", methods=["POST"])def generate():    data = request.get_json()    topic = data.get("topic")    level = data.get("level", "Beginner")    language = data.get("language", "English")    if not topic:        return jsonify({"error": "Topic is required"}), 400    try:        lesson = generate_lesson(topic, level, language)        return jsonify(lesson)    except Exception as e:        return jsonify({"error": str(e)}), 500# Quiz generator route@app.route("/api/quiz", methods=["POST"])def quiz():    data = request.get_json()    topic = data.get("topic")    level = data.get("level", "Beginner")    language = data.get("language", "English")    if not topic:        return jsonify({"error": "Topic is required"}), 400    try:        # Step 1: Generate lesson using same logic        lesson = generate_lesson(topic, level, language)        # Step 2: Use vocab to create quiz        quiz_data = generate_quiz(lesson["vocab"])        return jsonify({            "lesson": lesson,            "quiz": quiz_data        })    except Exception as e:        return jsonify({"error": str(e)}), 500    @app.route("/api/rhymes", methods=["POST"])def generate_rhyme_lesson():    data = request.get_json()    theme = data.get("theme", "")    language = data.get("language", "Spanish")  # ðŸ”¥ include language from frontend    if not theme:        return jsonify({"error": "Missing theme"}), 400    try:        rhymes = generate_rhymes(theme, language)  # ðŸ”¥ pass it into the generator        for item in rhymes:            english_word = item.get("english")            item["image"] = fetch_image_url(english_word)        return jsonify({"result": rhymes})    except Exception as e:        return jsonify({"error": str(e)}), 500if __name__ == "__main__":    app.run(debug=True)